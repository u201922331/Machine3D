2022-11-20 01:17:47 - BEGIN TRAINING
2022-11-20 01:17:47 - TRAINING ENDED WITH ERROR: ValueError('Object arrays cannot be loaded when allow_pickle=False')
2022-11-20 01:19:28 - BEGIN TRAINING
2022-11-20 01:19:28 - TRAINING ENDED WITH ERROR: ValueError('Object arrays cannot be loaded when allow_pickle=False')
2022-11-20 01:20:51 - BEGIN TRAINING
2022-11-20 01:20:51 - TRAINING ENDED WITH ERROR: ValueError('Object arrays cannot be loaded when allow_pickle=False')
2022-11-20 01:23:57 - BEGIN TRAINING
2022-11-20 01:23:57 - TRAINING ENDED WITH ERROR: TypeError("load() got an unexpected keyword argument 'allow_picke'")
2022-11-20 01:26:22 - BEGIN TRAINING
2022-11-20 01:26:24 - TRAINING ENDED WITH ERROR: KeyError('labels')
2022-11-20 01:28:12 - BEGIN TRAINING
2022-11-20 01:29:58 - TRAINING ENDED WITH ERROR: TypeError("unsupported operand type(s) for +: 'int' and 'NoneType'")
2022-11-20 01:39:54 - BEGIN TRAINING
2022-11-20 01:42:51 - TRAINING ENDED WITH ERROR: TypeError('in user code:\n\n    File "D:\\Users\\Usuario\\Documents\\GitHub\\3D-ORGAN\\venv\\lib\\site-packages\\keras\\engine\\training.py", line 1021, in train_function  *\n        return step_function(self, iterator)\n    File "D:\\Users\\Usuario\\Documents\\GitHub\\3D-ORGAN\\reconstruction\\model\\gan_utils.py", line 15, in gradient_penalty_loss  *\n        gradients = K.gradients(K.sum(y_pred), averaged_samples)\n    File "D:\\Users\\Usuario\\Documents\\GitHub\\3D-ORGAN\\venv\\lib\\site-packages\\keras\\backend.py", line 4352, in gradients  **\n        return tf.compat.v1.gradients(\n    File "D:\\Users\\Usuario\\Documents\\GitHub\\3D-ORGAN\\venv\\lib\\site-packages\\keras\\engine\\keras_tensor.py", line 254, in __array__\n        raise TypeError(\n\n    TypeError: You are passing KerasTensor(type_spec=TensorSpec(shape=(64, 32, 32, 32), dtype=tf.float32, name=None), name=\'random_weighted_average/add:0\', description="created by layer \'random_weighted_average\'"), an intermediate Keras symbolic input/output, to a TF API that does not allow registering custom dispatchers, such as `tf.cond`, `tf.function`, gradient tapes, or `tf.map_fn`. Keras Functional model construction only supports TF API calls that *do* support dispatching, such as `tf.math.add` or `tf.reshape`. Other APIs cannot be called directly on symbolic Kerasinputs/outputs. You can work around this limitation by putting the operation in a custom Keras layer `call` and calling that layer on this symbolic input/output.\n')
2022-11-20 10:19:51 - BEGIN TRAINING
2022-11-20 10:19:51 - TRAINING ENDED WITH ERROR: UnpicklingError('pickle data was truncated')
2022-11-20 10:21:52 - BEGIN TRAINING
2022-11-20 10:25:08 - TRAINING ENDED WITH ERROR: TypeError('in user code:\n\n    File "D:\\Users\\Usuario\\Documents\\GitHub\\Machine3D\\venv\\lib\\site-packages\\keras\\engine\\training.py", line 1021, in train_function  *\n        return step_function(self, iterator)\n    File "D:\\Users\\Usuario\\Documents\\GitHub\\Machine3D\\reconstruction\\model\\gan_utils.py", line 15, in gradient_penalty_loss  *\n        gradients = K.gradients(K.sum(y_pred), averaged_samples)\n    File "D:\\Users\\Usuario\\Documents\\GitHub\\Machine3D\\venv\\lib\\site-packages\\keras\\backend.py", line 4352, in gradients  **\n        return tf.compat.v1.gradients(\n    File "D:\\Users\\Usuario\\Documents\\GitHub\\Machine3D\\venv\\lib\\site-packages\\keras\\engine\\keras_tensor.py", line 254, in __array__\n        raise TypeError(\n\n    TypeError: You are passing KerasTensor(type_spec=TensorSpec(shape=(64, 32, 32, 32), dtype=tf.float32, name=None), name=\'random_weighted_average/add:0\', description="created by layer \'random_weighted_average\'"), an intermediate Keras symbolic input/output, to a TF API that does not allow registering custom dispatchers, such as `tf.cond`, `tf.function`, gradient tapes, or `tf.map_fn`. Keras Functional model construction only supports TF API calls that *do* support dispatching, such as `tf.math.add` or `tf.reshape`. Other APIs cannot be called directly on symbolic Kerasinputs/outputs. You can work around this limitation by putting the operation in a custom Keras layer `call` and calling that layer on this symbolic input/output.\n')
